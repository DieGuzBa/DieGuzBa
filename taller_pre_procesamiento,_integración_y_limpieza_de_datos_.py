# -*- coding: utf-8 -*-
"""Taller pre-procesamiento, integración y limpieza de datos  .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B4Xa5fkHNnHxjq8svPcSPN44DRn0_Jar

## **Taller Pre-procesamiento, integración y limpieza de datos con Python**

# Nueva sección

Integrantes del Grupo: 


*   Laura Catalina Guzmán Barragán
*   Fabian Raúl Duarte Sedano
*   Nicolas Claros Barbosa

Importar librerías y leer archivo
"""

import pandas as pd
df = pd.read_csv("homicidios_2020.csv")
df.head(10)

"""Cambiar nombres de las cabeceras"""

cabecera = ["CIUDAD","ARMAS","GENERO","EDAD"]
df.columns = cabecera
df.head(10)

"""Grabar el archivo con otro nombre"""

df.to_csv("homicidiosBogota.csv")

"""Imprimir los primeros 10"""

df.head(10)

"""imprimir los últimos 10"""

df.tail(10)

"""Forma del DataFrame"""

df.shape

"""Altura del DataFrame"""

len(df.index)

"""Cuenta los datos del DataFrame"""

df.describe()

"""El valor más alto de cada una de las columnas"""

df.max()

df.min()

"""Mediana de cada una de las columnas"""

df.median()

"""Seleccionar una fila específica"""

df.loc[2]

"""Imprimir unas filas y columnas específicas"""

df.iloc[0:10, 1:3]

"""Imprimir una celda específica"""

df.iloc[1,3]

"""Revisar datos nulos"""

df.isnull()

"""Suma de datos nulos"""

df.isnull().sum()

"""Imprimir el tipo de dato"""

df.dtypes

"""# Eliminar datos faltantes
•	dropna(axis=0) para eliminar fila

•	dropna(axis=1) para eliminar columnas

Elimina varias filas con ceros
"""

copia = df.copy()
copia.describe()

aux = copia.dropna(axis=0)
aux.shape

"""Elimina las columnas con datos en ceros"""

aux1 = copia.dropna(axis=1)
aux1.shape

"""Elimina las filas con datos perdidos en una columna"""

copia.dropna(subset=["EDAD"],axis=0, inplace=True)
copia.shape

"""## Transformar

Replace (data a reemplazar, nuevo valor)
"""

df.shape
df.isnull().sum()
df

"""Transformando la variable categórica GENERO y agrupando los datos"""

from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
df['GENERO']= encoder.fit_transform(df.GENERO.values)
print(df)

"""Transformando la variable categorica EDAD y Agrupando los datos con Python"""

encoder=LabelEncoder()
df['EDAD']= encoder.fit_transform(df.EDAD.values)
print(df)

"""Transformando la variable categ+orica ARMAS y agrupando los datos"""

encoder=LabelEncoder()
df['ARMAS']= encoder.fit_transform(df.ARMAS.values)
print(df)

df.tail(30)

df.head(30)

df.describe()